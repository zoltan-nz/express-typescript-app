{{#if isResourceTemplate}}
import * as Bookshelf from 'bookshelf';
{{/if}}
import { inject, named } from 'inversify';
import { Types, Core, Targets } from '../../{{deepness}}constants';
import { Logger as LoggerType } from '../../{{deepness}}core/Logger';
{{#if isResourceTemplate}}
import { Validate, Request } from '../../{{deepness}}core/api/Validate';
import { NotFoundException } from '../{{deepness}}exceptions/NotFoundException';
import { {{name.capitalize}}Repository } from '../{{deepness}}repositories/{{name.capitalize}}Repository';
import { {{name.capitalize}} } from '../{{deepness}}models/{{name.capitalize}}';
import { {{name.capitalize}}CreateRequest } from '../{{deepness}}requests/{{name.capitalize}}CreateRequest';
import { {{name.capitalize}}UpdateRequest } from '../{{deepness}}requests/{{name.capitalize}}UpdateRequest';
{{/if}}


export class {{name.capitalize}}Service {

    public log: LoggerType;

    {{#if isResourceTemplate}}
    constructor(
        @inject(Types.Repository) @named(Targets.Repository.{{name.capitalize}}Repository) public {{name.camelCase}}Repo: {{name.capitalize}}Repository,
        @inject(Types.Core) @named(Core.Logger) public Logger: typeof LoggerType
    ) {
        this.log = new Logger(__filename);
    }

    public async findAll(): Promise<Bookshelf.Collection<{{name.capitalize}}>> {
        return this.{{name.camelCase}}Repo.findAll();
    }

    public async findOne(id: number): Promise<{{name.capitalize}}> {
        const {{name.camelCase}} = await this.{{name.camelCase}}Repo.findOne(id);
        if ({{name.camelCase}} === null) {
            this.log.warn(`{{name.capitalize}} with the id=${id} was not found!`);
            throw new NotFoundException(id);
        }
        return {{name.camelCase}};
    }

    @Validate()
    public async create( @Request({{name.capitalize}}CreateRequest) body: any): Promise<{{name.capitalize}}> {
        // If the request body was valid we will create the {{name.camelCase}}
        const {{name.camelCase}} = await this.{{name.camelCase}}Repo.create(body);
        return {{name.camelCase}};
    }

    @Validate()
    public async update(id: number, @Request({{name.capitalize}}UpdateRequest) body: any): Promise<{{name.capitalize}}> {
        // Find or fail
        const {{name.camelCase}} = await this.findOne(id);

        // Set new values
        {{#if hasProperties}}
        {{#each properties}}
        {{../name.camelCase}}.{{name.capitalize}} = body.{{name.camelCase}};
        {{/each}}
        {{else}}
        // TODO asign correct values
        // {{name.camelCase}}.Value = body.value;
        {{/if}}

        // Update {{name.camelCase}} record
        const updated{{name.capitalize}} = await this.{{name.camelCase}}Repo.update(id, {{name.camelCase}}.toJSON());
        return updated{{name.capitalize}};
    }

    public async destroy(id: number): Promise<void> {
        await this.{{name.camelCase}}Repo.destroy(id);
    }
    {{else}}
    constructor(
        @inject(Types.Core) @named(Core.Logger) public Logger: typeof Log
    ) {
        this.log = new Logger(__filename);
    }
    {{/if}}

}
